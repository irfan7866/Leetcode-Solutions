/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverseBetween(ListNode* head, int left, int right) {

        if(head->next == NULL || left == right) return head;

        int cnt = 1;
        ListNode* prePrev = NULL;
        ListNode* prev = NULL;
        ListNode* curr = head;

        while(cnt <= left) {
            prePrev = prev;
            prev = curr;
            curr = curr->next;
            cnt++;
        }

        ListNode* hold = prev;
        ListNode* next = NULL;

        while(cnt <= right and curr) {
            cnt++;
            next = curr->next;
            curr->next = prev;
            prev = curr;
            curr = next;
        }

        if(prePrev == NULL) 
            head = prev;
        else    
            prePrev->next = prev;
        
        hold->next = curr;

        return head;
        
    }
};
