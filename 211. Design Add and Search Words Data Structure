class TrieNode {
public:
    TrieNode *next[26];
    bool word;

    TrieNode(bool b = false) {
        memset(next, 0, sizeof(next));
        word = b;
    }

};


class WordDictionary {

    TrieNode *root;

public:
    WordDictionary() {
        root = new TrieNode();
    }
    
    void addWord(string word) {

        TrieNode *p = root;

        for(int i=0; i<word.size(); i++) {
            if(p->next[word[i] - 'a'] == NULL) 
                p->next[word[i] - 'a'] = new TrieNode();
            p = p->next[word[i] - 'a'];
        }

        p->word = true;

    }
    
    bool search(string word) {

       return search(word.c_str(), root);

    }

private:

    bool search(const char* word, TrieNode* node) {

        for(int i=0; word[i] && node; i++) {
            if(word[i] != '.') 
                node = node->next[word[i]-'a'];
            else {
                TrieNode* temp = node;
                for(int j=0; j<26; j++) {
                    node = temp->next[j];
                    if(search(word+i+1, node)) return true;
                }
            }
        }

        return node and node->word;

    }

};

/**
 * Your WordDictionary object will be instantiated and called as such:
 * WordDictionary* obj = new WordDictionary();
 * obj->addWord(word);
 * bool param_2 = obj->search(word);
 */
