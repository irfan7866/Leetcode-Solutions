/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
    ListNode* reverse(ListNode* head) {
        ListNode* preptr = NULL;
        ListNode* temp = head;
        ListNode* nextptr = NULL;
        while(temp) {
            nextptr = temp->next;
            temp->next = preptr;
            preptr = temp;
            temp = nextptr;
        }
        head = preptr;
        return head;
    }
public:
    int pairSum(ListNode* head) {

        ListNode* slow = head;
        ListNode* fast = head->next;

        while(fast and fast->next) {
            slow = slow->next;
            fast = fast->next->next;
        }

        slow->next = reverse(slow->next);

        int ans = -1;

        ListNode* temp = head;
        slow = slow->next;

        while(slow) {
            ans = max(ans, (slow->val + temp->val));
            slow = slow->next;
            temp = temp->next;
        }

        return ans;
        
    }
};
